package src.infra.banco;

import java.util.ArrayList;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.SQLWarning;
import java.sql.Statement;

public class MeuStatement implements Statement {
  protected Connection conexao = null;
  protected Statement comando = null;

  protected ArrayList<Statement> comandos = new ArrayList<Statement>();

  protected ArrayList<MeuResultSet> resultados = new ArrayList<MeuResultSet>();

  public MeuStatement(String drv, String strCon, String usr, String senha) throws ClassNotFoundException, SQLException {
    Class.forName(drv);

    this.conexao = DriverManager.getConnection(strCon, usr, senha);

    this.conexao.setAutoCommit(false);

    this.comando = conexao.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
  }

  // metodos herdados da interface Statement

  @Override
  public void addBatch(String sql) throws SQLException {
    this.comando.addBatch(sql);
  }

  @Override
  public void cancel() throws SQLException {
    this.comando.cancel();
  }

  @Override
  public void clearBatch() throws SQLException {
    this.comando.clearBatch();
  }

  @Override
  public void clearWarnings() throws SQLException {
    this.comando.clearWarnings();
  }

  @Override
  public void close() throws SQLException {
    for (ResultSet r : this.resultados)
      r.close();

    for (Statement s : this.comandos)
      s.close();

    this.comando.close();
    this.conexao.close();
  }

  @Override
  public void closeOnCompletion() throws SQLException {
    this.comando.closeOnCompletion();
  }

  @Override
  public boolean execute(String sql) throws SQLException {
    return this.comando.execute(sql);
  }

  @Override
  public boolean execute(String sql, int autoGeneratedKeys) throws SQLException {
    return this.comando.execute(sql, autoGeneratedKeys);
  }

  @Override
  public boolean execute(String sql, int[] columnIndexes) throws SQLException {
    return this.comando.execute(sql, columnIndexes);
  }

  @Override
  public boolean execute(String sql, String[] columnNames) throws SQLException {
    return this.comando.execute(sql, columnNames);
  }

  @Override
  public int[] executeBatch() throws SQLException {
    return this.comando.executeBatch();
  }

  @Override
  public ResultSet executeQuery(String sql) throws SQLException {
    ResultSet resultado = this.comando.executeQuery(sql);

    MeuResultSet retorno = new MeuResultSet(this.comando, resultado);

    this.resultados.add(retorno);
    this.comandos.add(this.comando);

    this.comando = this.conexao.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);

    return retorno;
  }

  @Override
  public int executeUpdate(String sql) throws SQLException {
    return this.comando.executeUpdate(sql);
  }

  @Override
  public int executeUpdate(String sql, int autoGeneratedKeys) throws SQLException {
    return this.comando.executeUpdate(sql, autoGeneratedKeys);
  }

  @Override
  public int executeUpdate(String sql, int[] columnIndexes) throws SQLException {
    return this.comando.executeUpdate(sql, columnIndexes);
  }

  @Override
  public int executeUpdate(String sql, String[] columnNames) throws SQLException {
    return this.comando.executeUpdate(sql, columnNames);
  }

  @Override
  public Connection getConnection() throws SQLException {
    return this.comando.getConnection();
  }

  @Override
  public int getFetchDirection() throws SQLException {
    return this.comando.getFetchDirection();
  }

  @Override
  public int getFetchSize() throws SQLException {
    return this.comando.getFetchSize();
  }

  @Override
  public ResultSet getGeneratedKeys() throws SQLException {
    ResultSet resultado = this.comando.getGeneratedKeys();

    MeuResultSet retorno = new MeuResultSet(this.comando, resultado);

    this.comando = conexao.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);

    return retorno;
  }

  @Override
  public int getMaxFieldSize() throws SQLException {
    return this.comando.getMaxFieldSize();
  }

  @Override
  public int getMaxRows() throws SQLException {
    return this.comando.getMaxRows();
  }

  @Override
  public boolean getMoreResults() throws SQLException {
    return this.comando.getMoreResults();
  }

  @Override
  public boolean getMoreResults(int current) throws SQLException {
    return this.comando.getMoreResults(current);
  }

  @Override
  public int getQueryTimeout() throws SQLException {
    return this.comando.getQueryTimeout();
  }

  @Override
  public ResultSet getResultSet() throws SQLException {
    return this.comando.getResultSet();
  }

  @Override
  public int getResultSetConcurrency() throws SQLException {
    return this.comando.getResultSetConcurrency();
  }

  @Override
  public int getResultSetHoldability() throws SQLException {
    return this.comando.getResultSetHoldability();
  }

  @Override
  public int getResultSetType() throws SQLException {
    return this.comando.getResultSetType();
  }

  @Override
  public int getUpdateCount() throws SQLException {
    return this.comando.getUpdateCount();
  }

  @Override
  public SQLWarning getWarnings() throws SQLException {
    return this.comando.getWarnings();
  }

  @Override
  public boolean isClosed() throws SQLException {
    return this.comando.isClosed();
  }

  @Override
  public boolean isCloseOnCompletion() throws SQLException {
    return this.comando.isCloseOnCompletion();
  }

  @Override
  public boolean isPoolable() throws SQLException {
    return this.comando.isPoolable();
  }

  @Override
  public void setCursorName(String name) throws SQLException {
    this.comando.setCursorName(name);
  }

  @Override
  public void setEscapeProcessing(boolean enable) throws SQLException {
    this.comando.setEscapeProcessing(enable);
  }

  @Override
  public void setFetchDirection(int direction) throws SQLException {
    this.comando.setFetchDirection(direction);
  }

  @Override
  public void setFetchSize(int rows) throws SQLException {
    this.comando.setFetchSize(rows);
  }

  @Override
  public void setMaxFieldSize(int max) throws SQLException {
    this.comando.setMaxFieldSize(max);
  }

  @Override
  public void setMaxRows(int max) throws SQLException {
    this.comando.setMaxRows(max);
  }

  @Override
  public void setPoolable(boolean poolable) throws SQLException {
    this.comando.setPoolable(poolable);
  }

  @Override
  public void setQueryTimeout(int seconds) throws SQLException {
    this.comando.setQueryTimeout(seconds);
  }

  // metodos herdados da interface Wrapper

  @Override
  public boolean isWrapperFor(Class<?> iface) throws SQLException {
    return this.comando.isWrapperFor(iface);
  }

  @Override
  public <T> T unwrap(Class<T> iface) throws SQLException {
    return this.comando.unwrap(iface);
  }

  @Override
  public int hashCode() {
    int ret = super.hashCode();

    ret = 13 * ret + (this.conexao == null ? 0 : this.conexao.hashCode());
    ret = 13 * ret + (this.comando == null ? 0 : this.comando.hashCode());
    ret = 13 * ret + (this.comandos == null ? 0 : this.comandos.hashCode());
    ret = 13 * ret + (this.resultados == null ? 0 : this.resultados.hashCode());

    return ret;
  }

  @Override
  public boolean equals(Object obj) {
    if (obj == null)
      return false;

    if (this == obj)
      return true;

    if (this.getClass() == obj.getClass()) {
      Statement s = (Statement) obj;

      if (!super.equals(s))
        return false;

      MeuStatement ms = (MeuStatement) obj;

      if ((this.conexao == null && ms.conexao != null) || (this.conexao != null && ms.conexao == null))
        return false;

      if (this.conexao != null && ms.conexao != null && this.conexao.equals(ms.conexao))
        return false;

      if ((this.comando == null && ms.comando != null) || (this.comando != null && ms.comando == null))
        return false;

      if (this.comando != null && ms.comando != null && this.comando.equals(ms.comando))
        return false;

      if ((this.comandos == null && ms.comandos != null) || (this.comandos != null && ms.comandos == null))
        return false;

      if (this.comandos != null && ms.comandos != null && this.comandos.equals(ms.comandos))
        return false;

      if ((this.resultados == null && ms.resultados != null) || (this.resultados != null && ms.resultados == null))
        return false;

      if (this.resultados != null && ms.resultados != null && this.resultados.equals(ms.resultados))
        return false;

      return true;
    }

    return false;
  }

  @Override
  public String toString() {
    String ret = "Herdado...: " + super.toString() + "\n";

    ret += "Conexao...: " + this.conexao + "\n";
    ret += "Comando...: " + this.comando + "\n";
    ret += "Comandos..: " + this.comandos + "\n";
    ret += "Resultados: " + this.resultados;

    return ret;
  }

  // O metodo compareTo, que ï¿½, por vezes, obrigatorio, nao esta
  // sendo implementado porque, tendo dois objetos instanciados
  // desta classe, nao faria sentido pensar em qual deles eh o
  // maior ou em qual deles eh o menor.

  // Os metodos clone e construtor de copia, por vezes, obrigatorios,
  // nao estao sendo implementados porque, nao sao necessarios, ja
  // que esta classe nao possui metodos que alterem variaveis
  // declaradas (private ou protected).
}